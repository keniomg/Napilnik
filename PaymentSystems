using System;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        try
        {
            string firstSystemBaseLink = "pay.system1.ru/order?amount={0}RUB&hash={1}";
            string secondSystemBaseLink = "order.system2.ru/pay?amount={0}&id={1}&hash={2}";
            string thirdSystemBaseLink = "system3.com/pay?amount={0}&currency=RUB&id={1}&hash={2}";
            string secretKey = "12345";

            Order order = new Order(14, 12000);

            IHasher md5Hasher = new MD5Hasher();
            IHasher sha1Hasher = new SHA1Hasher();

            IPaymentSystem[] paymentSystems =
            {
                new FirstPaymentSystem(firstSystemBaseLink, md5Hasher),
                new SecondPaymentSystem(secondSystemBaseLink, md5Hasher),
                new ThirdPaymentSystem(thirdSystemBaseLink, secretKey, sha1Hasher)
            };

            foreach (IPaymentSystem system in paymentSystems)
                Console.WriteLine(system.GetPayingLink(order));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

public class Order
{
    public int Id { get; }
    public int Amount { get; }

    public Order(int id, int amount)
    {
        if (id <= 0)
            throw new ArgumentException("ID заказа должно быть больше 0");
        if (amount <= 0)
            throw new ArgumentException("Сумма заказа должна быть больше 0");

        Id = id;
        Amount = amount;
    }
}

public interface IPaymentSystem
{
    string GetPayingLink(Order order);
}

public class FirstPaymentSystem : IPaymentSystem
{
    private readonly string _baseLink;
    private readonly IHasher _hasher;

    public FirstPaymentSystem(string baseLink, IHasher hasher)
    {
        _baseLink = baseLink;
        _hasher = hasher;
    }

    public string GetPayingLink(Order order)
    {
        return string.Format(_baseLink, order.Amount, _hasher.Hash(order.Id.ToString()));
    }
}

public class SecondPaymentSystem : IPaymentSystem
{
    private readonly string _baseLink;
    private readonly IHasher _hasher;

    public SecondPaymentSystem(string baseLink, IHasher hasher)
    {
        _baseLink = baseLink;
        _hasher = hasher;
    }

    public string GetPayingLink(Order order)
    {
        return string.Format(_baseLink, order.Amount, order.Id, _hasher.Hash(order.Id + order.Amount.ToString()));
    }
}

public class ThirdPaymentSystem : IPaymentSystem
{
    private readonly string _baseLink;
    private readonly string _secretKey;
    private readonly IHasher _hasher;

    public ThirdPaymentSystem(string baseLink, string secretKey, IHasher hasher)
    {
        _baseLink = baseLink;
        _secretKey = secretKey;
        _hasher = hasher;
    }

    public string GetPayingLink(Order order)
    {
        return string.Format(_baseLink, order.Amount, order.Id, _hasher.Hash(order.Amount + order.Id + _secretKey));
    }
}

public interface IHasher
{
    string Hash(string message);
}

public class MD5Hasher : IHasher
{
    public string Hash(string message)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(message);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        }
    }
}

public class SHA1Hasher : IHasher
{
    public string Hash(string message)
    {
        using (SHA1 sha1 = SHA1.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(message);
            byte[] hashBytes = sha1.ComputeHash(inputBytes);

            return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        }
    }
}

namespace Napilnik
{
    using System;
    using System.Collections.Generic;

    internal class Napilnik
    {
        public static void Main()
        {
            try
            {
                Good iPhone12 = new Good("IPhone 12");
                Good iPhone11 = new Good("IPhone 11");

                Warehouse warehouse = new Warehouse();

                Shop shop = new Shop(warehouse);

                warehouse.Add(iPhone12, 10);
                warehouse.Add(iPhone11, 1);
                warehouse.ShowGoods();
                //Вывод всех товаров на складе с их остатком

                Cart cart = shop.Cart();
                cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе
                cart.ShowGoods();
                //Вывод всех товаров в корзине

                Console.WriteLine(cart.Order().Paylink);

                cart.Add(iPhone12, 9); //Ошибка, после заказа
            }
            catch (Exception exception)
            {
                Console.WriteLine($"Ошибка: {exception.Message}");
            }
        }

        public class Good
        {
            public Good(string name)
            {
                Name = name ?? throw new ArgumentException("Имя товара не может быть равно 'null'");
            }

            public string Name { get; private set; }
        }

        public abstract class GoodsFillable
        {
            protected readonly Dictionary<Good, int> Goods = new Dictionary<Good, int>();

            public virtual void Add(Good good, int count)
            {
                if (ValidateArguments(good, count))
                {
                    if (Goods.ContainsKey(good))
                    {
                        Goods[good] += count;
                    }
                    else
                    {
                        Goods.Add(good, count);
                    }
                }
            }

            public void Remove(Good good, int count)
            {
                if (ValidateRemoveArguments(good, count))
                {
                    Goods[good] -= count;

                    if (Goods[good] == 0)
                        Goods.Remove(good);
                }
            }

            public void ShowGoods()
            {
                foreach (KeyValuePair<Good, int> pair in Goods)
                    Console.WriteLine($"Товаров '{pair.Key.Name}' - {pair.Value} - штук");
            }

            public bool ValidateRemoveArguments(Good good, int count)
            {
                ValidateArguments(good, count);

                if (Goods.ContainsKey(good) == false)
                    throw new ArgumentException("Товар отсутствует в списке");

                if (count > Goods[good])
                    throw new InvalidOperationException("Введено слишком большое количество товаров");

                return true;
            }

            protected bool ValidateArguments(Good good, int count)
            {
                if (good == null)
                    throw new ArgumentNullException("Товар не может быть равен 'null'");

                if (count <= 0)
                    throw new ArgumentOutOfRangeException("Количество товара не может быть отрицательным");

                return true;
            }
        }

        public interface IWarehouse
        {
            void Remove(Good good, int count);
            void Add(Good good, int count);
            bool ValidateRemoveArguments(Good good, int count);
        }

        public class Warehouse : GoodsFillable, IWarehouse { }

        public class Cart : GoodsFillable
        {
            private readonly IWarehouse _iWarehouse;

            public Cart(IWarehouse iWarehouse)
            {
                _iWarehouse = iWarehouse ?? throw new ArgumentNullException("Склад не может быть равен 'null'");
            }

            public Order Order()
            {
                foreach (KeyValuePair<Good, int> pair in Goods)
                {
                    _iWarehouse.Remove(pair.Key, pair.Value);
                }

                return new Order();
            }

            public override void Add(Good good, int count)
            {
                if (ValidateArguments(good, count))
                {
                    int totalGoodCount = Goods.ContainsKey(good) ? count + Goods[good] : count;

                    if (_iWarehouse.ValidateRemoveArguments(good, totalGoodCount))
                        base.Add(good, count);
                }
            }
        }

        public class Order
        {
            public Order()
            {
                Paylink = "www.somelink.com";
            }

            public string Paylink { get; private set; }
        }

        public class Shop
        {
            private readonly IWarehouse _iWarehouse;

            public Shop(IWarehouse iWarehouse)
            {
                _iWarehouse = iWarehouse ?? throw new ArgumentNullException("Склад не может быть равен 'null'");
            }

            public Cart Cart()
            {
                return new Cart(_iWarehouse);
            }
        }
    }
}
